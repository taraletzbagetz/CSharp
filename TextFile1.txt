https://www.tutorialsteacher.com/csharp/csharp-delegates

expression:
https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/expression-trees/expression-trees-execution


luxuries
time: health: a quiet mind: slow mornings: ability to travel: a house full of love


Expression 
function returning expression for flexible method;

https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/expression-trees/

function generator;


//CHECK

[DynamicDependency("Where`1", typeof(Enumerable))]
public static IQueryable<TSource> Where<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
{
    if (source == null)
        throw Error.ArgumentNull(nameof(source));
    if (predicate == null)
        throw Error.ArgumentNull(nameof(predicate));
    return source.Provider.CreateQuery<TSource>(
        Expression.Call(
            null,
            CachedReflectionInfo.Where_TSource_2(typeof(TSource)),
            source.Expression, Expression.Quote(predicate)
            ));
}
//CHECK


//TEST
https://enterprisecraftsmanship.com/posts/specification-pattern-c-implementation/
